Aim: write the program to demonstrate the following 

A] simple neural network.py

code:
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Input

x_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_train = np.array([0, 0, 0, 1])

model = Sequential()
model.add(Input(shape=(2,)))
model.add(Dense(2, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=10, batch_size=4)

loss, accuracy = model.evaluate(x_train, y_train)
print("Accuracy:", accuracy)

B] support vector machine.py

code:
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

iris = datasets.load_iris()
X = iris.data
Y = iris.target

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

svm = SVC(kernel='linear')
svm.fit(X_train, Y_train)

Y_pred = svm.predict(X_test)

accuracy = accuracy_score(Y_test, Y_pred)
print("Accuracy:", accuracy)
