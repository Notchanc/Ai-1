Aim: To Compute the following Search Algorithms 

Q.1 A] Simulation of the Tic-Tac-Toe game using Min-Max Search

Code:

import os
import time

board = [" "] * 10
player = 1

Win = 1
Draw = -1
Running = 0
Game = Running

def DrawBoard():
    print("%c | %c | %c " % (board[1], board[2], board[3]))
    print("---------")
    print("%c | %c | %c " % (board[4], board[5], board[6]))
    print("---------")
    print("%c | %c | %c " % (board[7], board[8], board[9]))

def CheckPosition(x):
    return board[x] == ' '

def CheckWin():
    global Game
    winning_combinations = [
        [1, 2, 3], [4, 5, 6], [7, 8, 9], 
        [1, 4, 7], [2, 5, 8], [3, 6, 9], 
        [1, 5, 9], [3, 5, 7]
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] and board[combo[0]] != ' ':
            Game = Win
            return
    if ' ' not in board[1:]:
        Game = Draw
    else:
        Game = Running

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

print("Tic-Tac-Toe Game")
print("Player 1 [X] --- Player 2 [O]\n")
print("Please Wait...")
time.sleep(1)

while Game == Running:
    clear_screen()
    DrawBoard()
    if player % 2 != 0:
        print("Player 1's turn (X)")
        Mark = 'X'
    else:
        print("Player 2's turn (O)")
        Mark = 'O'
    
    try:
        choice = int(input("Enter the position [1-9]: "))
        if choice < 1 or choice > 9:
            print("Invalid position! Choose between 1-9.")
            time.sleep(1)
            continue
    except ValueError:
        print("Invalid input! Enter a number between 1-9.")
        time.sleep(1)
        continue

    if CheckPosition(choice):
        board[choice] = Mark
        player += 1
        CheckWin()
    else:
        print("Position already taken! Try again.")
        time.sleep(1)

clear_screen()
DrawBoard()

if Game == Draw:
    print("Game Drawn!")
elif Game == Win:
    winner = "Player 1" if (player - 1) % 2 != 0 else "Player 2"
    print(f"{winner} Won!")


B] Simulation of Alpha Beta pruning 

code:

import math

def minimax_alpha_beta(node, depth, alpha, beta, maximizingPlayer):
    if depth == 0 or node.is_terminal():
        return node.evaluate(), None

    if maximizingPlayer:
        maxEval = -math.inf
        bestMove = None
        for move in node.get_possible_moves():
            child = node.make_move(move)
            eval, _ = minimax_alpha_beta(child, depth - 1, alpha, beta, False)
            if eval > maxEval:
                maxEval = eval
                bestMove = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return maxEval, bestMove
    else:
        minEval = math.inf
        bestMove = None
        for move in node.get_possible_moves():
            child = node.make_move(move)
            eval, _ = minimax_alpha_beta(child, depth - 1, alpha, beta, True)
            if eval < minEval:
                minEval = eval
                bestMove = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return minEval, bestMove

class Node:
    def __init__(self, value):
        self.value = value

    def evaluate(self):
        return self.value

    def is_terminal(self):
        return True 

    def get_possible_moves(self):
        return [] 

    def make_move(self, move):
        return None 

root = Node(3)
best_score, best_move = minimax_alpha_beta(root, 3, -math.inf, math.inf, True)
print("Best move:", best_move, "with score:", best_score)
